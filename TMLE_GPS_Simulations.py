# -*- coding: utf-8 -*-
"""TMLE/GPS Simulations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pvnF3tdoUToxO4_liZbkdesKoxq9fq0X

# Simulations with TMLE and GPS

## Load Packages
"""

#Install CausalCurve package
!pip install causal-curve

#Load Packages
import pandas as pd
import numpy as np
from causal_curve import TMLE_Regressor
from scipy.stats import expon
from causal_curve import GPS_Regressor

"""# Simulation 1

Import data from Simulation Study 1
"""

Sim_1A = pd.read_csv('Sim1A_Data.csv')
Sim_1B = pd.read_csv('Sim1B_Data.csv')

Sim_1C = pd.read_csv('Sim1C_Data.csv')
Sim_1D = pd.read_csv('Sim1D_Data.csv')

Sim_1E = pd.read_csv('Sim1E_Data.csv')
Sim_1F = pd.read_csv('Sim1F_Data.csv')

"""Create empty dataframes to hold quantile point estimates"""

#Create Empty Dataframes
Sim1A_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1B_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim1C_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1D_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim1E_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1F_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

"""Initialize TMLE and GPS Regressors for Each Simulation Scenario"""

#Initialize TMLE and GPS Regressors for Each dataset

#Simulation 1A
tmle1A = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1A = GPS_Regressor()

#Simulation 1B
tmle1B = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1B = GPS_Regressor()

#Simulation 1C
tmle1C = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1C = GPS_Regressor()

#Simulation 1D
tmle1D = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1D = GPS_Regressor()

#Simulation 1E
tmle1E = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1E = GPS_Regressor()

#Simulation 1F
tmle1F = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps1F = GPS_Regressor()

"""Fit Models for Each Simulation Scenario"""

#Simulation 1A
tmle1A.fit(T = Sim_1A_Sub['T'], X = Sim_1A_Sub[['X1', 'X2']], y = Sim_1A_Sub['Y'])
gps1A.fit(T = Sim_1A_Sub['T'], X = Sim_1A_Sub[['X1','X2']], y = Sim_1A_Sub['Y'])
quantile1A = np.asarray(Sim_1A_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1A = tmle1A.point_estimate(quantile1A)
GPS1A = gps1A.point_estimate(quantile1A)
TMLE_GPS1A = np.concatenate((TMLE1A, GPS1A),axis=1)
Results1A = pd.DataFrame(TMLE_GPS1A, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1A_Results = Sim1A_Results.append(Results1A, ignore_index = True)

#Simulation 1B
tmle1B.fit(T = Sim_1B_Sub['T'], X = Sim_1B_Sub[['X1', 'X2']], y = Sim_1B_Sub['Y'])
gps1B.fit(T = Sim_1B_Sub['T'], X = Sim_1B_Sub[['X1','X2']], y = Sim_1B_Sub['Y'])
quantile1B = np.asarray(Sim_1B_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1F = tmle1B.point_estimate(quantile1B)
GPS1F = gps1B.point_estimate(quantile1B)
TMLE_GPS1B = np.concatenate((TMLE1B, GPS1B),axis=1)
Results1B = pd.DataFrame(TMLE_GPS1B, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1B_Results = Sim1B_Results.append(Results1B, ignore_index = True)

#Simulation 1C
tmle1C.fit(T = Sim_1C_Sub['T'], X = Sim_1C_Sub[['X1', 'X2']], y = Sim_1C_Sub['Y'])
gps1C.fit(T = Sim_1C_Sub['T'], X = Sim_1C_Sub[['X1','X2']], y = Sim_1C_Sub['Y'])
quantile1C = np.asarray(Sim_1C_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1C = tmle1C.point_estimate(quantile1C)
GPS1C = gps1E.point_estimate(quantile1C)
TMLE_GPS1C = np.concatenate((TMLE1C, GPS1C),axis=1)
Results1C = pd.DataFrame(TMLE_GPS1C, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1C_Results = Sim1C_Results.append(Results1C, ignore_index = True)

#Simulation 1D
tmle1D.fit(T = Sim_1F_Sub['T'], X = Sim_1D_Sub[['X1', 'X2']], y = Sim_1D_Sub['Y'])
gps1D.fit(T = Sim_1F_Sub['T'], X = Sim_1D_Sub[['X1','X2']], y = Sim_1D_Sub['Y'])
quantile1D = np.asarray(Sim_1F_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1D = tmle1D.point_estimate(quantile1D)
GPS1D = gps1D.point_estimate(quantile1D)
TMLE_GPS1D = np.concatenate((TMLE1D, GPS1D),axis=1)
Results1D = pd.DataFrame(TMLE_GPS1D, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1D_Results = Sim1D_Results.append(Results1D, ignore_index = True)

#Simulation 1E
tmle1E.fit(T = Sim_1E_Sub['T'], X = Sim_1E_Sub[['X1', 'X2']], y = Sim_1E_Sub['Y'])
gps1E.fit(T = Sim_1E_Sub['T'], X = Sim_1E_Sub[['X1','X2']], y = Sim_1E_Sub['Y'])
quantile1E = np.asarray(Sim_1E_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1E = tmle1E.point_estimate(quantile1E)
GPS1E = gps1E.point_estimate(quantile1E)
TMLE_GPS1E = np.concatenate((TMLE1E, GPS1E),axis=1)
Results1E = pd.DataFrame(TMLE_GPS1E, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1E_Results = Sim1E_Results.append(Results1E, ignore_index = True)

#Simulation 1F
tmle1F.fit(T = Sim_1F_Sub['T'], X = Sim_1F_Sub[['X1', 'X2']], y = Sim_1F_Sub['Y'])
gps1F.fit(T = Sim_1F_Sub['T'], X = Sim_1F_Sub[['X1','X2']], y = Sim_1F_Sub['Y'])
quantile1F = np.asarray(Sim_1F_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE1F = tmle1F.point_estimate(quantile1F)
GPS1F = gps1F.point_estimate(quantile1F)
TMLE_GPS1F = np.concatenate((TMLE1F, GPS1F),axis=1)
Results1F = pd.DataFrame(TMLE_GPS1F, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim1F_Results = Sim1F_Results.append(Results1F, ignore_index = True)

"""Save Results to Compare to other methods"""

Sim1A_Results.to_csv('Sim1A_TMLE_GPS.csv')
Sim1B_Results.to_csv('Sim1B_TMLE_GPS.csv')
Sim1C_Results.to_csv('Sim1C_TMLE_GPS.csv')
Sim1D_Results.to_csv('Sim1D_TMLE_GPS.csv')
Sim1E_Results.to_csv('Sim1E_TMLE_GPS.csv')
Sim1F_Results.to_csv('Sim1F_TMLE_GPS.csv')

"""# Simulation 2

Import data from Simulation Study 2
"""

Sim_2A_Sub = pd.read_csv('Sim2A_Data.csv')
Sim_2B_Sub = pd.read_csv('Sim2B_Data.csv')

Sim_2C_Sub = pd.read_csv('Sim2C_Data.csv')
Sim_2D = pd.read_csv('Sim2D_Data.csv')

Sim_2E_Sub = pd.read_csv('Sim2E_Data.csv')
Sim_2F_Sub = pd.read_csv('Sim2F_Data.csv')

"""Create empty dataframes to hold quantile point estimates"""

#Create Empty Dataframes
Sim2A_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2B_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim2C_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2D_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim2E_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2F_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

"""Initialize TMLE and GPS Regressors for Each simulation scenario

"""

#Simulation 2A
tmle2A = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2A = GPS_Regressor()

#Simulation 2B
tmle2B = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2B = GPS_Regressor()

#Simulation 2C
tmle2C = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2C = GPS_Regressor()

#Simulation 2D
tmle2D = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2D = GPS_Regressor()

#Simulation 2E
tmle2E = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2E = GPS_Regressor()

#Simulation 2F
tmle2F = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps2F = GPS_Regressor()

"""Fit Models for Each Simulation Scenario"""

#Simulation 2A
tmle2A.fit(T = Sim_2A_Sub['T'], X = Sim_2A_Sub[['X1', 'X2']], y = Sim_2A_Sub['Y'])
gps2A.fit(T = Sim_2A_Sub['T'], X = Sim_2A_Sub[['X1','X2']], y = Sim_2A_Sub['Y'])
quantile2A = np.asarray(Sim_2A_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2A = tmle2A.point_estimate(quantile2A)
GPS2A = gps2A.point_estimate(quantile2A)
TMLE_GPS1A = np.concatenate((TMLE2A, GPS2A),axis=1)
Results2A = pd.DataFrame(TMLE_GPS2A, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2A_Results = Sim2A_Results.append(Results1A, ignore_index = True)

#Simulation 2B
tmle2B.fit(T = Sim_2B_Sub['T'], X = Sim_2B_Sub[['X1', 'X2']], y = Sim_2B_Sub['Y'])
gps1B.fit(T = Sim_2B_Sub['T'], X = Sim_2B_Sub[['X1','X2']], y = Sim_2B_Sub['Y'])
quantile2B = np.asarray(Sim_2B_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2F = tmle2B.point_estimate(quantile2B)
GPS2F = gps1B.point_estimate(quantile2B)
TMLE_GPS2B = np.concatenate((TMLE2B, GPS2B),axis=1)
Results2B = pd.DataFrame(TMLE_GPS2B, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2B_Results = Sim2B_Results.append(Results2B, ignore_index = True)

#Simulation 2C
tmle2C.fit(T = Sim_2C_Sub['T'], X = Sim_2C_Sub[['X1', 'X2']], y = Sim_2C_Sub['Y'])
gps2C.fit(T = Sim_2C_Sub['T'], X = Sim_2C_Sub[['X1','X2']], y = Sim_2C_Sub['Y'])
quantile2C = np.asarray(Sim_2C_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2C = tmle2C.point_estimate(quantile2C)
GPS2C = gps2C.point_estimate(quantile2C)
TMLE_GPS2C = np.concatenate((TMLE2C, GPS2C),axis=1)
Results2C = pd.DataFrame(TMLE_GPS2C, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2C_Results = Sim2C_Results.append(Results2C, ignore_index = True)

#Simulation 2D
tmle2D.fit(T = Sim_2D_Sub['T'], X = Sim_2D_Sub[['X1', 'X2']], y = Sim_2D_Sub['Y'])
gps2D.fit(T = Sim_2D_Sub['T'], X = Sim_2D_Sub[['X1','X2']], y = Sim_2D_Sub['Y'])
quantile1F = np.asarray(Sim_2D_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2D = tmle2D.point_estimate(quantile2D)
GPS2D = gps2D.point_estimate(quantile2D)
TMLE_GPS2D = np.concatenate((TMLE2D, GPS2D),axis=1)
Results2D = pd.DataFrame(TMLE_GPS2D, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2D_Results = Sim2D_Results.append(Results2D, ignore_index = True)

#Simulation 2E
tmle2E.fit(T = Sim_2E_Sub['T'], X = Sim_2E_Sub[['X1', 'X2']], y = Sim_2E_Sub['Y'])
gps2E.fit(T = Sim_2E_Sub['T'], X = Sim_2E_Sub[['X1','X2']], y = Sim_2E_Sub['Y'])
quantile2E = np.asarray(Sim_2E_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2E = tmle2E.point_estimate(quantile2E)
GPS2E = gps2E.point_estimate(quantile2E)
TMLE_GPS2E = np.concatenate((TMLE2E, GPS2E),axis=1)
Results2E = pd.DataFrame(TMLE_GPS2E, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2E_Results = Sim2E_Results.append(Results2E, ignore_index = True)

#Simulation 2F
tmle2F.fit(T = Sim_2F_Sub['T'], X = Sim_2F_Sub[['X1', 'X2']], y = Sim_2F_Sub['Y'])
gps2F.fit(T = Sim_2F_Sub['T'], X = Sim_2F_Sub[['X1','X2']], y = Sim_2F_Sub['Y'])
quantile2F = np.asarray(Sim_2F_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE2F = tmle2F.point_estimate(quantile2F)
GPS2F = gps2F.point_estimate(quantile2F)
TMLE_GPS2F = np.concatenate((TMLE2F, GPS2F),axis=1)
Results2F = pd.DataFrame(TMLE_GPS2F, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim2F_Results = Sim2F_Results.append(Results2F, ignore_index = True)

"""Save Results to compare to other methods"""

Sim2A_Results.to_csv('Sim2A_TMLE_GPS.csv')
Sim2B_Results.to_csv('Sim2B_TMLE_GPS.csv')
Sim2C_Results.to_csv('Sim2C_TMLE_GPS.csv')
Sim2D_Results.to_csv('Sim2D_TMLE_GPS.csv')
Sim2E_Results.to_csv('Sim2E_TMLE_GPS.csv')
Sim2F_Results.to_csv('Sim2F_TMLE_GPS.csv')

"""# Simulation 3

Import data from Simulation Study 3
"""

Sim_3A_Sub = pd.read_csv('Sim3A_Data.csv')
Sim_3B_Sub = pd.read_csv('Sim3B_Data.csv')

Sim_3C_Sub = pd.read_csv('Sim3C_Data.csv')
Sim_3D_Sub = pd.read_csv('Sim3D_Data.csv')

Sim_3E_Sub = pd.read_csv('Sim3E_Data.csv')
Sim_3F_Sub = pd.read_csv('Sim3F_Data.csv')

"""Create empty dataframes to hold quantile point estimates"""

Sim3A_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3B_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim3C_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3D_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

Sim3E_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3F_Results = pd.DataFrame(columns=['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])

"""Initialize TMLE and GPS regressors for each simulation scenario"""

#Simulation 3A
tmle3A = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3A = GPS_Regressor()

#Simulation 3B
tmle3B = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3B = GPS_Regressor()

#Simulation 3C
tmle3C = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3C = GPS_Regressor()

#Simulation 3D
tmle3D = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3D = GPS_Regressor()

#Simulation 3E
tmle3E = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3E = GPS_Regressor()

#Simulation 3F
tmle3F = TMLE_Regressor(
    random_seed=10,
    bandwidth=10)
gps3F = GPS_Regressor()

"""Fit models for each simulation scenario"""

#Simulation 3A
tmle3A.fit(T = Sim_3A_Sub['T'], X = Sim_3A_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3A_Sub['Y'])
gps3A.fit(T = Sim_3A_Sub['T'], X = Sim_3A_Sub[['X1','X2', 'X3','X4']], y = Sim_3A_Sub['Y'])
quantile3A = np.asarray(Sim_3A_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3A = tmle3A.point_estimate(quantile3A)
GPS3A = gps3A.point_estimate(quantile3A)
TMLE_GPS3A = np.concatenate((TMLE3A, GPS3A),axis=1)
Results3A = pd.DataFrame(TMLE_GPS3A, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3A_Results = Sim3A_Results.append(Results3A, ignore_index = True)

#Simulation 3B
tmle3B.fit(T = Sim_3B_Sub['T'], X = Sim_3B_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3B_Sub['Y'])
gps3B.fit(T = Sim_3B_Sub['T'], X = Sim_3B_Sub[['X1','X2', 'X3','X4']], y = Sim_3B_Sub['Y'])
quantile3B = np.asarray(Sim_3B_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3B = tmle3B.point_estimate(quantile3B)
GPS3B = gps3B.point_estimate(quantile3B)
TMLE_GPS3B = np.concatenate((TMLE3B, GPS3B),axis=1)
Results3B = pd.DataFrame(TMLE_GPS3B, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3B_Results = Sim3B_Results.append(Results3B, ignore_index = True)

#Simulation 3C
tmle3C.fit(T = Sim_3C_Sub['T'], X = Sim_3C_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3C_Sub['Y'])
gps3C.fit(T = Sim_3C_Sub['T'], X = Sim_3C_Sub[['X1','X2', 'X3','X4']], y = Sim_3C_Sub['Y'])
quantile3C = np.asarray(Sim_3C_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3C = tmle3C.point_estimate(quantile3C)
GPS3C = gps3C.point_estimate(quantile3C)
TMLE_GPS3C = np.concatenate((TMLE3C, GPS3C),axis=1)
Results3C = pd.DataFrame(TMLE_GPS3C, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3C_Results = Sim3C_Results.append(Results3C, ignore_index = True)

#Simulation 3D
tmle3D.fit(T = Sim_3D_Sub['T'], X = Sim_3D_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3D_Sub['Y'])
gps3D.fit(T = Sim_3D_Sub['T'], X = Sim_3D_Sub[['X1','X2', 'X3','X4']], y = Sim_3D_Sub['Y'])
quantile3D = np.asarray(Sim_3D_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3D = tmle3D.point_estimate(quantile3D)
GPS3D = gps3D.point_estimate(quantile3D)
TMLE_GPS3D = np.concatenate((TMLE3D, GPS3D),axis=1)
Results3D = pd.DataFrame(TMLE_GPS3D, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3D_Results = Sim3D_Results.append(Results3D, ignore_index = True)

#Simulation 3E
tmle3E.fit(T = Sim_3E_Sub['T'], X = Sim_3E_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3E_Sub['Y'])
gps3E.fit(T = Sim_3E_Sub['T'], X = Sim_3E_Sub[['X1','X2', 'X3','X4']], y = Sim_3E_Sub['Y'])
quantile3E = np.asarray(Sim_3E_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3E = tmle3E.point_estimate(quantile3E)
GPS1E = gps1E.point_estimate(quantile3E)
TMLE_GPS3E = np.concatenate((TMLE3E, GPS3E),axis=1)
Results3E = pd.DataFrame(TMLE_GPS3E, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3E_Results = Sim3E_Results.append(Results3E, ignore_index = True)

#Simulation 3F
tmle3F.fit(T = Sim_3F_Sub['T'], X = Sim_3F_Sub[['X1', 'X2', 'X3','X4']], y = Sim_3F_Sub['Y'])
gps3F.fit(T = Sim_3F_Sub['T'], X = Sim_3F_Sub[['X1','X2', 'X3','X4']], y = Sim_3F_Sub['Y'])
quantile3F = np.asarray(Sim_3F_Sub[['T']].quantile([0, 0.25, .5, .75, 1]))
TMLE3F = tmle3F.point_estimate(quantile3F)
GPS3F = gps3F.point_estimate(quantile3F)
TMLE_GPS3F = np.concatenate((TMLE3F, GPS3F),axis=1)
Results3F = pd.DataFrame(TMLE_GPS3F, columns = ['TMLE_1','TMLE_2','TMLE_3','TMLE_4','TMLE_5','GPS_1','GPS_2', 'GPS_3', 'GPS_4', 'GPS_5'])
Sim3F_Results = Sim3F_Results.append(Results3F, ignore_index = True)

"""Save Results to compare to other methods"""

Sim3A_Results.to_csv('Sim3A_TMLE_GPS.csv')
Sim3B_Results.to_csv('Sim3B_TMLE_GPS.csv')
Sim3C_Results.to_csv('Sim3C_TMLE_GPS.csv')
Sim3D_Results.to_csv('Sim3D_TMLE_GPS.csv')
Sim3E_Results.to_csv('Sim3E_TMLE_GPS.csv')
Sim3F_Results.to_csv('Sim3F_TMLE_GPS.csv')